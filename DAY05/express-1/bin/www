#!/usr/bin/env node

// 웹서버 환경 구성
// 배포시, www를 app.js에 합치고, app.js를 엔트리포인트로 지정한다.

/**
 * Module dependencies.
 * 모듈 종속성
 */

// 개발용 Node Express 프로젝트의 최초 시작 모듈
// 개발 환경에서의 Node 백엔드 어플리케이션을 서비스 하기 위한, 로컬 웹 서버 환경 구성
// 노드 백엔드 어플리케이션 서비스 환경 제공

var app = require('../app');
// 웹 서버를 통해 서비스할 실제 Node 어플리케이션 (app.js)를 참조
var debug = require('debug')('express-1:server');
// 각종 백엔드 디버깅 환경 제공을 위한 debug 객체 참조
var http = require('http');
// Node Freamwork내 에서 기본 제공되는 http 웹서버 패키지를 참조

/**
 * Get port from environment and store in Express.
 * 환경에서 포트를 가져와 Express에 저장
 */

// ip주소: 포트
// 실제 서비스시, HTTP는 80 포트를 사용한다.
// HTTPS는 443을 사용한다.

var port = normalizePort(process.env.PORT || '3000');
// 추후에 .env 를 다운 받고 설정 시, 기본 포트로 .env에서 설정한 포트를 사용

// 기본 포트 지정
app.set('port', port);

/**
 * Create HTTP server.
 * HTTP 서버를 생성
 */
var server = http.createServer(app);
// 웹 서버 객체 생성

/**
 * Listen on provided port, on all network interfaces.
 * 모든 네트워크 인터페이스에서 제공된 포트에서 수신 대기
 */

server.listen(port);
// 해당하는 포트로 이벤트 요청 대기
server.on('error', onError);
// 서버 발생시 onError 호출
server.on('listening', onListening);
// 요청이 들어오면 onListening

/**
 * Normalize a port into a number, string, or false.
 * 포트를 숫자, 문자열 또는 거짓으로 정규화
 */

function normalizePort(val) {
  // 포트 번호를 받고, true or flase를 반환
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    // 명명된 파이프
    return val;
  }

  if (port >= 0) {
    // port number
    // 포트 번호
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * HTTP 서버 "오류" 이벤트에 대한 이벤트 리스너
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  // 친숙한 메시지로 특정 수신 오류 처리
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 * HTTP 서버 "수신 중" 이벤트에 대한 이벤트 리스너
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
